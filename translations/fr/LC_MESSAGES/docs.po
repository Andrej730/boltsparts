
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2014-08-23 20:17+0200\n"
"PO-Revision-Date: 2014-07-29 09:58+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 1.3\n"

#. document title
msgid "How to setup a fcstd base"
msgstr ""

msgid ""
"You need to have FreeCAD and [FreeCAD for BOLTS installed]({{ "
"doc(freecad,installation) }})."
msgstr ""

msgid ""
"This assumes, that the blt file for this part is already created, and you"
" have\n"
"a fcstd file with the part that you want to add to BOLTS."
msgstr ""

msgid "We do this at the example of a aluminum T slot extrusion."
msgstr ""

msgid "### Check the fcstd file in FreeCAD"
msgstr ""

msgid "Load the part in FreeCAD and check that it looks visually ok."
msgstr ""

msgid ""
"If the part is supposed to be parametric, then try to change the "
"parameters\n"
"that BOLTS should be able to set. For the aluminum extrusion this is only"
" the\n"
"length, which corresponds to the height of the box in the file. So we "
"select\n"
"the box in the combo view, select the data tab and change the value for "
"the\n"
"height. The part should now change its length, but still look like "
"expected. Do\n"
"this for all parameters, also check combinations."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Visually checking the part\" src=\"{{ static(fcstd-base1.png)"
" }}\" style=\"width: 100%%;\"/>]({{ static(fcstd-base1.png) }})"
msgstr ""

msgid "### Find out feature and property names"
msgstr ""

msgid ""
"Usually, a part consists of several features. We need a way to tell BOLTS"
" which\n"
"feature is the one that it should use. If the part is parametric, we also"
" need\n"
"to tell it, how the properties of the features map to the parameters."
msgstr ""

msgid ""
"Features in FreeCAD have a unique name in a document, but this name is "
"not\n"
"always identical to the label that is displayed in the combo view, so be\n"
"careful. BOLTS offers a convenient way to find out the names of all "
"features in\n"
"the document. Enter the following lines into the python console of "
"FreeCAD:"
msgstr ""

msgid ""
"import BOLTS\n"
"    BOLTS.list_names(FreeCAD.ActiveDocument)"
msgstr ""

msgid ""
"The first line imports and starts BOLTS, the second line calls a function"
" from\n"
"BOLTS that gives out a list of all features with their label and the\n"
"corresponding object names."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Finding feature names\" src=\"{{ static(fcstd-base2.png) }}\""
" style=\"width: 100%%;\"/>]({{ static(fcstd-base2.png) }})"
msgstr ""

msgid ""
"We need to remember the name of the root feature, that BOLTS is supposed "
"to\n"
"insert, and the names of all features that provide parametric behaviour "
"and the\n"
"corresponding names of the properties."
msgstr ""

msgid ""
"For the T slot extrusion, the root feature has the label `Fillet`, and "
"the name\n"
"`Fillet`, the length of the extrusion can be changed with the `Height` "
"property\n"
"of the `Box` (both name and label)."
msgstr ""

msgid "### Copy the fcstd file to the correct directory"
msgstr ""

msgid ""
"The fcstd file goes to the subdirectory of the collection in the freecad\n"
"directory of the repository."
msgstr ""

msgid "### Write the base file"
msgstr ""

msgid ""
"The base file provides BOLTS with all the informations it needs to know "
"about\n"
"the files in a collection directory."
msgstr ""

msgid "For the aluminum extrusion it looks like this:"
msgstr ""

#, python-format
msgid ""
"---\n"
"    - filename: tslot-20x20-2S.fcstd\n"
"      author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"      license: CC0 <http://creativecommons.org/publicdomain/zero/1.0/>\n"
"      type: fcstd\n"
"      objects:\n"
"       - objectname: Fillet\n"
"         classids: [tslot20x20-2s]\n"
"         proptoparam:\n"
"           Fillet : {Label : name}\n"
"           Box: {Height : l}\n"
"      source: created from scratch, dimensions from http://www13"
".boschrexroth-"
"us.com/partstream/Load_Category.aspx?Category=20mm%%20Series&menu=1,1,1\n"
"    ..."
msgstr ""

msgid ""
"The hyphens and dots on the first and the last line indicate the begin "
"and end\n"
"of the metadata (a base file is a [YAML file](http://yaml.org/). Between "
"those\n"
"two markers follows a list of base file elements, one for each file. The "
"begin\n"
"of a new element is indicated by a hyphen. If there are more than one "
"file in\n"
"the collection directory, there would be more elements, but here it is "
"only\n"
"one."
msgstr ""

msgid ""
"Each element contains various fields with information about the file, "
"e.g. the\n"
"filename or name and email address of the author, here in lines 2 and 3."
msgstr ""

msgid ""
"Because the part will form a combined work with the rest of the design, "
"and we\n"
"do not want to force the users of BOLTS to put their work under a certain"
"\n"
"license, BOLTS requires that the author waives all rights for this part, "
"by\n"
"releasing it in the Public Domain, preferably by the use of the [CC0\n"
"License](http://creativecommons.org/publicdomain/zero/1.0/).  This is "
"done in\n"
"the fourth line."
msgstr ""

msgid ""
"In the fifth line the type of file is indicated, in this case it is a "
"fcstd\n"
"file. Then follows a list of objects. It is in principle possible, to "
"have\n"
"several different parts in one fcstd file. Each element describes one "
"object."
msgstr ""

msgid ""
"The objectname field gives the name of the root feature for this object. "
"We\n"
"learned this name in the second step of this tutorial. For the extrusion "
"this\n"
"is `Fillet`."
msgstr ""

msgid ""
"The classids field gives a list of classids (as given in the blt file of "
"this\n"
"collection), for which this object is used. In our example it is only a "
"single\n"
"classid."
msgstr ""

msgid ""
"The proptoparam field gives the mapping between the parameters as "
"specified in\n"
"the blt file of the collection, and the feature names and properties that"
" we\n"
"found out in the second step of this tutorial. The `Label` property of "
"the\n"
"feature with name `Fillet` (the root feature) should be set to the name "
"of the\n"
"part and the `Height` property of the feature `Box` should be set to the "
"length\n"
"`l`."
msgstr ""

msgid ""
"A parameter might appear more than once if more than one feature needs to"
" be\n"
"adjusted."
msgstr ""

msgid ""
"The optional source field allows to give informations about the origin of"
" the\n"
"file. So if there is a URL from which this file was downloaded, this can "
"be\n"
"included here."
msgstr ""

msgid ""
"When working on base files, pay attention to whitespace and identation "
"and do\n"
"not use tabs."
msgstr ""

msgid "### Test it"
msgstr ""

msgid ""
"You should now test the newly added part. This is most easily done on the"
"\n"
"command line by typing"
msgstr ""

msgid ""
"./bolts.py export freecad\n"
"    ./bolts.py test freecad"
msgstr ""

msgid ""
"in the repo directory. This will fire up a FreeCAD instance with the "
"module\n"
"search path set appropriately, so that typing"
msgstr ""

msgid "import BOLTS"
msgstr ""

msgid "on the FreeCAD python console should do the trick."
msgstr ""

msgid ""
"If BOLTS is started successfully, try adding the newly added part to the\n"
"current document with different combinations of parameters."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Testing the result\" src=\"{{ static(fcstd-base3.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(fcstd-base3.png) }})"
msgstr ""

msgid "### Next steps"
msgstr ""

msgid ""
"You might want to [contribute]({{ doc(general,development) }}) this part "
"to\n"
"BOLTS, so that every user can profit from your efforts."
msgstr ""

#. document title
msgid "Installing BOLTS for FreeCAD"
msgstr ""

msgid "### Download a BOLTS for FreeCAD release"
msgstr ""

msgid ""
"You can find the most recent BOLTS for FreeCAD release at the [Downloads "
"Page]({{ url(main.downloads) }})."
msgstr ""

msgid ""
"There are different archive types available, if you are unsure, which to "
"choose use the zip."
msgstr ""

msgid "### Extract it to your macro folder"
msgstr ""

msgid ""
"You can look up the location of the macro folder in the preferences: "
"Choose\n"
"Edit->Preferences, in the dialog select the macro tab. The macro path is "
"listed\n"
"there. On linux the macro folder is usually located at `~/.FreeCAD`."
msgstr ""

msgid ""
"When you are done the macro folder should contain a subfolder called "
"BOLTS and\n"
"a file called start_bolts.FCMacro"
msgstr ""

msgid "The installation is now complete."
msgstr ""

msgid "### Try it"
msgstr ""

msgid ""
"Start FreeCAD and choose <code>Macros</code> from the <code>Macro</code> "
"menu.\n"
"In the dialog that pops up select <code>start_bolts.FCMacro</code> and "
"click on\n"
"execute."
msgstr ""

msgid "If you get an error that says something like:"
msgstr ""

msgid "No module named yaml"
msgstr ""

msgid ""
"then this is because the yaml library for python is not installed. If you"
" are\n"
"using Linux, then you can usually get it using your package manager. If "
"you are\n"
"on windows you can get an installer "
"[here](http://pyyaml.org/wiki/PyYAML); you\n"
"have to install YAML for the version of Python (first two digits) that is"
"\n"
"bundled with FreeCAD. You can find out which version that is from the "
"first\n"
"line of the python console in FreeCAD. If it is not opened, you can make "
"it\n"
"visible by checking it in the Menu View under point Views."
msgstr ""

msgid "No module named importlib"
msgstr ""

msgid ""
"then you are using a older version of python where the importlib library "
"is not\n"
"included. You can get it "
"[here](https://pypi.python.org/pypi/importlib/1.0.2).\n"
"For importlib no convenient installer is available for windows. "
"Instructions on\n"
"how to install a python module without an installer can be found\n"
"[here](http://docs.python.org/2/install/index.html). Again you should use"
" the\n"
"version for the python version bundled with FreeCAD."
msgstr ""

msgid "If you get a message that says"
msgstr ""

msgid "uic import failed. Make sure that the pyside tools are installed"
msgstr ""

msgid ""
"then there is a part of the PySide Qt bindings missing. For Debian and "
"Ubuntu\n"
"this is contained in the package pyside-tools."
msgstr ""

msgid ""
"If you get different errors, than please try the latest development "
"snapshot.\n"
"If it still does not work, please report that problem. The simplest way "
"to do\n"
"so is to use the comments below, but there is a number of of other places"
" where\n"
"you can report problems, a list can be found\n"
"[on the contribute page]({{ url(main.contribute) }})."
msgstr ""

msgid ""
"If you want, you can [set up a toolbar button]({{ doc(freecad,toolbar) "
"}}), or\n"
"you can read [how to use BOLTS for FreeCAD]({{ doc(freecad,usage) }})."
msgstr ""

#. document title
msgid "Using BOLTS for FreeCAD"
msgstr ""

msgid ""
"You need to have [installed BOLTS for FreeCAD]({{ "
"doc(freecad,installation) }})."
msgstr ""

msgid "### Starting the part selector using the macro"
msgstr ""

msgid ""
"Choose <code>Macros</code> from the <code>Macro</code> menu and execute\n"
"<code>start_bolts.FCMacro</code>."
msgstr ""

msgid "### Starting the parts selector using a toolbar button"
msgstr ""

msgid ""
"If you have [setup a toolbar button]({{ doc(freecad,toolbar) }}), you can"
" start\n"
"the part selector by simply clicking on the button"
msgstr ""

msgid "### The different elements of the part selector"
msgstr ""

msgid "The available parts are sorted in two ways:"
msgstr ""

msgid ""
"1. thematically by collections\n"
"2. by the standardization organisation if standardized"
msgstr ""

msgid ""
"By expanding the tree one can browse through the available parts. In the "
"area\n"
"between the treeview and the button informations about the current "
"selection\n"
"are displayed."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Expanded treeview\" src=\"{{ static(partsselector2.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(partsselector2.png) }})"
msgstr ""

msgid ""
"You can see that some parts (like {{ standard(DIN931) }}, {{ "
"standard(DIN933) }})\n"
"are visible twice in this screenshot, once in the hexagon fastener "
"collection,\n"
"once in the list of {{ body(DIN) }} standards."
msgstr ""

msgid "### Specify parameters and insert the part"
msgstr ""

msgid ""
"If you select a part, for example {{ standard(ISO4017) }}, another "
"hexagon\n"
"fastener, below the information area additional elements appear that "
"allow to\n"
"give values for the parameters of the part that are not yet specify."
msgstr ""

msgid ""
"To lookup the meaning of the parameters, one can consult the\n"
"[BOLTS specification page of this part]({{ standard_url(ISO4017) }}).\n"
"The navigation of the [specification pages]({{ url(parts.index) }})\n"
"is structured in the same way as the navigation in the parts selector."
msgstr ""

msgid ""
"In the case of {{ standard(ISO4017) }}, we need to give a length and a\n"
"diameter. The diameter can be chosen from the drop down list that lists "
"all\n"
"choices known to BOLTS, the length can be entered in the line edit. It "
"only\n"
"accepts positive numbers."
msgstr ""

msgid ""
"Once the parameters are specified, the part can be inserted into the "
"active\n"
"document by clicking the `Add part` button. In the combo view on the "
"right side\n"
"you can see that the label of the object gives the standard and the value"
" of\n"
"all the parameters we have specified."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Expanded treeview\" src=\"{{ static(partsselector3.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(partsselector3.png) }})"
msgstr ""

#. document title
msgid "How to setup a base function"
msgstr ""

msgid ""
"You need to have FreeCAD and [FreeCAD for BOLTS installed]({{ "
"doc(freecad, installation) }})."
msgstr ""

msgid ""
"This assumes that the [blt file]({{ doc(general, blt-files) }})  for this"
" part\n"
"is already created, and you have a python function that creates the part "
"that\n"
"you want to add to BOLTS. For more information on part scripting in "
"FreeCAD see\n"
"the [FreeCAD documentation on this "
"topic](http://freecadweb.org/wiki/index.php?title=Power_users_hub)."
msgstr ""

msgid "### The function"
msgstr ""

msgid "As an example we  use the follwing function to create washers:"
msgstr ""

msgid "import Part"
msgstr ""

msgid ""
"def washer1(params,document):\n"
"        key = params['key']\n"
"        d1 = params['d1']\n"
"        d2 = params['d2']\n"
"        s = params['s']\n"
"        name = params['name']"
msgstr ""

msgid ""
"part = document.addObject(\"Part::Feature\",name)\n"
"        outer = Part.makeCylinder(d2,s)\n"
"        inner = Part.makeCylinder(d1,s)\n"
"        part.Shape = outer.cut(inner).removeSplitter()"
msgstr ""

msgid ""
"This function uses the CSG facilities of FreeCAD, but it is equally "
"possible to\n"
"use BRep scripting."
msgstr ""

msgid ""
"It is necessary to write the function such that it is a function of two\n"
"parameters, a dict of parameter names and values, and a FreeCAD document."
" The\n"
"keys of this dict will be the names of the parameters of the part, as "
"described\n"
"in the blt file. There is an additional parameter `name` that holds the "
"name of\n"
"the part."
msgstr ""

msgid ""
"In the first part of the function, we are assigning local variables with "
"the\n"
"parameter values as a shortcut. In the second part of the function, we "
"add a\n"
"new object to the document, create the geometry and assign it to the "
"part.\n"
"`removeSplitter` cleans up artifacts resulting from CSG operation under "
"certain\n"
"circumstances."
msgstr ""

msgid "### Put it to the right place"
msgstr ""

msgid ""
"This function should reside in a file (in this case called `washer.py`) "
"with\n"
"extension `.py` in a subdirectory of the freecad directory which is named"
" after\n"
"the collection to which the part belongs (in this case `washer`). This\n"
"directory must contain a empty file called `__init__.py` and the base "
"file for\n"
"this collection (in this case `washer.base`)."
msgstr ""

msgid ""
"The base file provides BOLTS with all the informations it needs to know "
"about\n"
"the files in a collection directory, it is a kind of manifest file. It "
"contains\n"
"a list of sections (more precisely \n"
"[base file elements]({{ spec(base-file-element) }}))\n"
", each describing one file:"
msgstr ""

msgid ""
"---\n"
"    - filename: washer.py\n"
"      author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"      license: LGPL 2.1+ <http://www.gnu.org/licenses/lgpl-2.1>\n"
"      type: function\n"
"      functions:\n"
"        - name: washer1\n"
"          classids: [plainwasher1, plainwasher2, "
"plainwasherforcheesehead, heavydutyplainwasher]\n"
"    ..."
msgstr ""

msgid ""
"The hyphens and dots on the first and the last line indicate the begin "
"and\n"
"end of the metadata (a base file is a [YAML file](http://yaml.org/). "
"Between\n"
"those two markers follows a list of base file elements, one for each "
"file.\n"
"The begin of a new element is indicated by a hyphen. If there are more "
"than\n"
"one file in the collection directory, there would be more elements, but "
"here\n"
"it is only one."
msgstr ""

msgid ""
"The base file element gives informations about the file like the "
"filename,\n"
"the author and the license under which it is published."
msgstr ""

msgid ""
"The line `type: function` indicates that it contains python functions for"
"\n"
"FreeCAD. As a file can contain more than one function, a list of elements"
"\n"
"follows, that describe the individual functions. In our case there is "
"only\n"
"one, called washer1."
msgstr ""

msgid ""
"There is the possibility to add an optional `source` field which allows "
"to give\n"
"informations about the origin of the file. If there is a URL from which "
"this\n"
"file was downloaded, this can be included here."
msgstr ""

msgid ""
"The `classids` field contains a list of classids to which this function\n"
"applies.  BOLTS contains four different classes that describe washers, so"
" in\n"
"this case this list is rather long, but in other cases it might only "
"contain\n"
"a single entry. Be careful, that the parameter names for all classes in "
"this\n"
"list must be the same, otherwise the parameter dict contains unexpected\n"
"entries or names can not be found."
msgstr ""

msgid "### Testing"
msgstr ""

msgid ""
"If nothing happens when you try to add the file, there is probably an "
"error\n"
"occuring during the execution of the function. Such errors are suppressed"
" by\n"
"the gui system, so that no error messages are displayed. You can "
"circumvent\n"
"this by activating the `Add part` button manually. To do this type"
msgstr ""

msgid "BOLTS.widget.ui.addButton.clicked.emit(True)"
msgstr ""

msgid ""
"in the FreeCAD python console. This should display exceptions if they "
"occur and\n"
"also the output from `print` statements."
msgstr ""

msgid ""
"When fixing a bug, you have to close FreeCAD, and repeat this step from "
"the\n"
"beginning. This is a rather tedious development cycle, so taking care "
"when\n"
"writing the function pays off in this case."
msgstr ""

msgid ""
"You might want to [contribute]({{ doc(general, development) }}) this part"
" to\n"
"BOLTS, so that every user can profit from your efforts."
msgstr ""

#. document title
msgid "Set up a toolbar button for BOLTS"
msgstr ""

msgid ""
"This is a adapted and slightly extended version of a [description from "
"the FreeCAD "
"wiki](http://freecadweb.org/wiki/index.php?title=Macros_recipes#How_to_use.3F)."
msgstr ""

msgid "### Open the Customize dialog"
msgstr ""

msgid ""
"It can be found at Tools->Customize. Select the macros tab. If you get an"
" error\n"
"message make sure you have [BOLTS for FreeCAD installed]({{ "
"doc(freecad,installation)}})."
msgstr ""

msgid "### Select the macro and fill in fields"
msgstr ""

msgid ""
"Select the `start_bolts.FCMacro` from the drop-down list. The various "
"fields\n"
"can be filled with `start BOLTS standard parts library` or something "
"similar."
msgstr ""

msgid ""
"Then click on the three dots next to Pixmap, choose add icons and "
"navigate to\n"
"the BOLTS folder in your macro path (this might be tricky, as the macro "
"folder\n"
"is hidden). Add the subfolder icons by clicking `Open`. Finally choose "
"the\n"
"golden bolt icon with filename `bolts32.png`."
msgstr ""

msgid "When you are done, it should look like this:"
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Filled in Customize dialog\" src=\"{{ "
"static(toolbarbutton1.png) }}\" style=\"width: 100%%;\"/>]({{ "
"static(toolbarbutton1.png) }})"
msgstr ""

msgid "### Confirm the custom macro"
msgstr ""

msgid "You do this by clicking the `Add` button."
msgstr ""

msgid ""
"If you want to change something afterwards, you can select the custom "
"macro in\n"
"the list on the left by double clicking, make your changes, and confirm "
"them by\n"
"clicking on the `Replace` button."
msgstr ""

msgid "### Create a new toolbar and add the button"
msgstr ""

msgid ""
"In the Customize dialog select the toolbar tab. On the left drop-down "
"list\n"
"select macros, on the right select the workbench in which you want to "
"create\n"
"the toolbar button."
msgstr ""

msgid ""
"Then create a new toolbar by clicking `New...` and call it BOLTS. The "
"start\n"
"macro can be added by selecting it in the left list and clicking on the\n"
"right-facing arrow."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"New toolbar created and macro added\" src=\"{{ "
"static(toolbarbutton2.png) }}\" style=\"width: 100%%;\"/>]({{ "
"static(toolbarbutton2.png) }})"
msgstr ""

msgid "Then close the Customize dialog."
msgstr ""

msgid ""
"Switch to the workbench where you added the toolbar in the previous step."
" Or\n"
"switch away and back if this toolbar is currently active."
msgstr ""

msgid ""
"You now should have a new toolbar, and a click on the yellow bolt icon "
"should\n"
"open the BOLTS standard part selector."
msgstr ""

msgid ""
"You can now learn [how to use BOLTS for FreeCAD]({{ doc(freecad,usage) "
"}})."
msgstr ""

#. document title
msgid "How to install BOLTS for OpenSCAD"
msgstr ""

msgid "### Download"
msgstr ""

msgid ""
"You can download a stable release or development snapshot of BOLTS for "
"OpenSCAD\n"
"from the [download page]({{ url(main.downloads) }}). There are different\n"
"archive types and licenses available, if you do not know which one you "
"want,\n"
"you should be fine with the GPL 3.0 zip version."
msgstr ""

msgid "### Local installation"
msgstr ""

msgid ""
"Just extract all the files in the archive in a directory. You can now use"
" BOLTS\n"
"for designs in this folder only. This is a good choice if you want to "
"test\n"
"development snapshots."
msgstr ""

msgid "### Global installation"
msgstr ""

msgid ""
"To be able to use BOLTS everywhere, you need to install it globally. The "
"best\n"
"way to do it is to extract all files from the archive into your user "
"library\n"
"directory. The path for this directory depends on your system:"
msgstr ""

msgid ""
"- Windows: `My Documents\\OpenSCAD\\libraries`\n"
" - Linux: `$HOME/.local/share/OpenSCAD/libraries`\n"
" - MacOS: `$HOME/Documents/OpenSCAD/libraries`"
msgstr ""

msgid "### Test"
msgstr ""

msgid "To make sure that the installation succeeded, start OpenSCAD, type"
msgstr ""

msgid ""
"include <BOLTS.scad>\n"
"    DIN931();"
msgstr ""

msgid ""
"and compile. If you installed locally, OpenSCAD needs to be started from "
"the\n"
"directory, or you can save the two lines into a scad file in the "
"directory."
msgstr ""

msgid "The preview window should now show a hexagon bolt."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Successful installation\" src=\"{{ static(openscad-"
"installation.png) }}\" style=\"width: 100%%;\"/>]({{ static(openscad-"
"installation.png) }})"
msgstr ""

#. document title
msgid "How to use BOLTS for OpenSCAD"
msgstr ""

msgid ""
"You need to have [installed BOLTS for OpenSCAD]({{ "
"doc(openscad,installation) }})."
msgstr ""

msgid "### Inserting parts"
msgstr ""

msgid ""
"Using parts from BOLTS works exactly like\n"
"[using "
"modules](http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/The_OpenSCAD_Language#Modules)"
"\n"
"that you defined yourself in your scad file."
msgstr ""

msgid ""
"The most difficult part is to find the right module. Modules are named "
"after\n"
"the standard that specifies the dimensions of a part. If a part is not\n"
"standardized, the module has a descriptive name."
msgstr ""

msgid ""
"It might seem a bit awkward to refer to a simple bolt as {{ "
"standard(DIN931) }}\n"
"or {{ standard(ISO4014) }}, but by using this naming scheme, the part is\n"
"uniquely specified, and this information is useful when assembling a bill"
" of\n"
"materials or shopping for all required parts for a design."
msgstr ""

msgid ""
"But most people do not know the standard numbers for the parts that they "
"want\n"
"to use. For this reason BOLTS offers on its webpage a\n"
"[browsable overview]({{ url(parts.index) }})\n"
"over all parts that it provides. There one can browse through the "
"different\n"
"collections and check out which standards of a standardization body are\n"
"available in BOLTS."
msgstr ""

msgid ""
"Each part has a dedicated page, where one can find more detailed "
"informations\n"
"about this part, a drawing and tables with dimensions. The information "
"that is\n"
"most interesting for our purposes can be found in the section OpenSCAD. "
"There\n"
"it says either that the part is not available for OpenSCAD (in which case"
" you\n"
"might consider [to help making it available]({{ url(main.contribute) "
"}})),\n"
"or gives details how to use it."
msgstr ""

msgid ""
"The hexagon bolt {{ standard(ISO4014) }} is available, and in the "
"subsection\n"
"`Incantations` the first tells us how to insert it in our scad code. The "
"module\n"
"name is `ISO4014`, it takes two parameters, a key (default value \"M3\"),"
" and the\n"
"length l (default value 20).  The meaning of the parameters can be "
"checked in\n"
"the drawing and the tables on he page."
msgstr ""

msgid "So to insert a M3x20 hexagon bolt into our design, we just write"
msgstr ""

msgid "ISO4014();"
msgstr ""

msgid "for an M8x40, we use"
msgstr ""

msgid "ISO4014(\"M8\",40);"
msgstr ""

msgid "and so on."
msgstr ""

msgid "### Using dimensions"
msgstr ""

msgid ""
"You probably need to translate and rotate the bolt in your design to have"
" it\n"
"exactly where you want it. For that it is useful to know the dimensions "
"of the\n"
"part. One could look them up in the tables and insert the numbers in the "
"scad\n"
"file by hand, but BOLTS offers a more flexible way: On can obtain a list "
"of all\n"
"parameters of the part using the second line listes in the `Incantation`\n"
"section of the part page."
msgstr ""

msgid "For example for a M4 washer according to {{ standard(DIN125A) }}:"
msgstr ""

msgid "dims = DIN125A_dims(\"M4\");"
msgstr ""

msgid "dims is now a list of lists with the content"
msgstr ""

msgid "[[\"s\", 0.8], [\"d2\", 9], [\"key\", \"M4\"], [\"d1\", 4.3]]"
msgstr ""

msgid ""
"A specific dimension (like the inner diameter) can now either be accessed"
" using\n"
"list indices"
msgstr ""

msgid "echo(dims[3][0]);"
msgstr ""

msgid "or by using a convenience function provided by BOLTS"
msgstr ""

msgid "echo(get_dim(dims,\"d1\"));"
msgstr ""

msgid ""
"If you need only a single parameter, it is even shorter to avoid the dims"
" variable and write"
msgstr ""

msgid "echo(get_dim(DIN125A_dims(\"M4\"),\"d1\"));"
msgstr ""

msgid ""
"By using dimensions this way, your code avoids magic numbers and becomes "
"more\n"
"readable and can be modified easily."
msgstr ""

msgid "### Using connectors"
msgstr ""

msgid ""
"To make the positioning of BOLTS part easier, BOLTS includes\n"
"[local.scad](https://github.com/jreinhardt/local-scad), an improved "
"version of\n"
"the [attach library](http://www.thingiverse.com/thing:30136)."
msgstr ""

msgid ""
"Instead of having complicated nested `translate` and `rotate` calls, this"
"\n"
"library allows to specify the position and orientation of a portion of a "
"design\n"
"using so called connectors. A connector is a data type that contains\n"
"informations about both position and orientation."
msgstr ""

msgid ""
"A connector is created with the `new_cs` function, which takes two "
"arguments: a\n"
"vector with three values specifying the origin of the connector and a "
"list of\n"
"two vectors specifying one main and one additional direction."
msgstr ""

msgid ""
"Connectors are actually like local coordinate systems with a origin and "
"three\n"
"axes, but the third direction does not need to be specified, but is "
"calculated\n"
"from the other two direction."
msgstr ""

msgid ""
"Connectors can be displayed using the `show_cs` module, which takes a "
"connector\n"
"as argument. The resulting object has a size of one unit, so it might be\n"
"difficult to spot in big designs."
msgstr ""

msgid ""
"Positioning is done with the `align` module, which takes two connectors "
"as\n"
"arguments. It then translates and rotates the child of the module such "
"that the\n"
"first connector is aligned with the second connector. Optionally, a\n"
"displacement in the connector coordinate system can be specified."
msgstr ""

msgid ""
"Many parts in BOLTS already have connectors connectors defined, to check "
"what a\n"
"specific part provides, check the part page in the\n"
"[online reference]({{ url(parts.index) }}). For parts with connectors\n"
"a function is available with the same name as the part, but with a "
"`_conn`\n"
"appended. This function takes the name of the connector as first argument"
" and\n"
"the same arguments as the part as further arguments and returns the "
"connector."
msgstr ""

msgid ""
"The general workflow is to create a connector which specifies where the "
"BOLTS\n"
"part should end up in your design. Then a connector of the BOLTS part is\n"
"chosen, depending on what point of the part should end up there. Finally "
"the\n"
"align module is used to position the part."
msgstr ""

msgid "This structure is illustrated again by the following example:"
msgstr ""

msgid "### Example: Bolted connection"
msgstr ""

#, python-format
msgid ""
"include <BOLTS.scad>\n"
"    \n"
"    $fn=50;\n"
"    \n"
"    %% cube([10,40,50]);\n"
"    \n"
"    //target connector\n"
"    cube_cs = new_cs(origin = [10,20,20], axes = [[-1,0,0],[0,-1,0]]);"
msgstr ""

msgid ""
"//BOLTS part connectors\n"
"    washer_cs = ISO7089_conn(\"top\",\"M4\");\n"
"    bolt_cs = ISO4017_conn(\"root\",\"M4\",20);\n"
"    nut_cs = ISO4035_conn(\"bottom\",\"M4\");\n"
"    \n"
"    //connectors can be displayed with\n"
"    //show_cs(cube_cs);\n"
"    \n"
"    //thickness of washer\n"
"    s = get_dim(ISO7089_dims(\"M4\"),\"s\");\n"
"    \n"
"    //position washer and bolt at the location specified by cube_cs\n"
"    align(washer_cs,cube_cs) ISO7089(\"M4\");\n"
"    align(bolt_cs,cube_cs,[-s,0,0]) ISO4017(\"M4\",20);\n"
"    align(washer_cs,cube_cs,[10+s,0,0]) ISO7089(\"M4\");\n"
"    align(nut_cs,cube_cs,[10+s,0,0]) ISO4035(\"M4\");"
msgstr ""

msgid "This results in"
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Bolted connection example\" src=\"{{ static(openscad-"
"positioningexample.png) }}\" style=\"width: 100%%;\"/>]({{ static"
"(openscad-positioningexample.png) }})"
msgstr ""

msgid "### Check for errors"
msgstr ""

msgid ""
"The modules provided by BOLTS perform a number of sanity checks. If there"
" is a\n"
"problem, it will output a warning on the console, so you should check "
"that\n"
"after compiling."
msgstr ""

msgid "For example, if you mix up the parameters"
msgstr ""

msgid "ISO4014(40,\"M8\");"
msgstr ""

msgid "BOLTS will tell you"
msgstr ""

msgid ""
"Error: Expected a Table Index as parameter key for ISO4014, but 40 is not"
" a string\n"
"    Error: Expected a Length (mm) as parameter l for ISO4014, but M8 is "
"not numerical\n"
"    TableLookUpError in ISO4014, table 0"
msgstr ""

msgid "Or if you accidentally give a negative length"
msgstr ""

msgid "ISO4014(\"M8\",-40);"
msgstr ""

msgid ""
"Error: Expected a Length (mm) as parameter l for ISO4014, but -40 is "
"negative"
msgstr ""

msgid ""
"Or if you use a standard, that is not used anymore (like {{ "
"standard(DIN931) }}):"
msgstr ""

msgid "DIN931(\"M4\",20);"
msgstr ""

msgid "BOLTS will inform you that"
msgstr ""

msgid ""
"Warning: The standard DIN931 is withdrawn. Although withdrawn standards "
"are often still in use, it might be better to use its successor "
"DINEN24014 instead"
msgstr ""

msgid "### Checking for the version"
msgstr ""

msgid ""
"BOLTS provides version information to allow a scad file to complain when "
"a\n"
"unsuitable version of BOLTS is used. This is especially important for "
"scad\n"
"files that are published on the internet. Version information comes in "
"two\n"
"flavours: the number of the release, and a date."
msgstr ""

msgid "The number of the release can be accessed by calling the function"
msgstr ""

msgid "BOLTS_version()"
msgstr ""

msgid ""
"For a stable release it returns a list with the major and minor version "
"as\n"
"integers. For a development release the string \"development\" is "
"returned."
msgstr ""

msgid "The date can be accessed using the function"
msgstr ""

msgid "BOLTS_date()"
msgstr ""

msgid ""
"and is returned as a list with three integers for the year, the month and"
" the\n"
"day at which the distribution was exported."
msgstr ""

msgid ""
"The final ingredient to uniquely identify the version of BOLTS is the "
"license.\n"
"Distributions conforming to different licenses can differ in the "
"selection of\n"
"parts offered. To query the license of the distribution one can use the "
"function"
msgstr ""

msgid "BOLTS_license()"
msgstr ""

msgid "which returns a string with the license."
msgstr ""

#. document title
msgid "How to create a base module"
msgstr ""

msgid ""
"This tutorial shows you the preferred way to make a class from a\n"
"[collection]({{ doc(general,blt-files) }}) available in OpenSCAD."
msgstr ""

msgid ""
"This assumes that you have already a module available that takes a number"
" of\n"
"parameters as input and builds the part that the class describes."
msgstr ""

msgid ""
"If not you have two options. Either you learn\n"
"[OpenSCAD](http://www.openscad.org/documentation.html) and write such a "
"module\n"
"yourself."
msgstr ""

msgid ""
"Or you try to find out if someone else has done this already. There are a"
" number of sites where a lot of scad code is published:"
msgstr ""

msgid ""
"- [Thingiverse](http://www.thingiverse.com/)\n"
" - [Youmagine](https://www.youmagine.com/)\n"
" - [Cubehero](https://cubehero.com/)\n"
" - [GitHub](https://github.com/)\n"
" - [Bld3r](http://www.bld3r.com/)\n"
" - [list with many more](http://reprap.org/wiki/Printable_part_sources)"
msgstr ""

msgid ""
"However, to use code written by someone else, you need to make sure that "
"there\n"
"are no licensing problems. I wrote about licensing in BOLTS\n"
"[here]({{ doc(general,licensing) }}). If the code has no licensing\n"
"information or is published under a incompatible license, you can try to\n"
"contact the author and ask him to dual-license with a license that allows"
"\n"
"inclusion in BOLTS."
msgstr ""

msgid ""
"This tutorial will illustrate the process using the example of the pipe\n"
"collection with a pipe module that lives in a file called `pipe.scad`:"
msgstr ""

msgid ""
"/* Pipe module for OpenSCAD\n"
"     * Copyright (C) 2013 Johannes Reinhardt <jreinhardt@ist-dein-"
"freund.de>\n"
"     *\n"
"     * This library is free software; you can redistribute it and/or\n"
"     * modify it under the terms of the GNU Lesser General Public\n"
"     * License as published by the Free Software Foundation; either\n"
"     * version 2.1 of the License, or (at your option) any later version."
"\n"
"     *\n"
"     * This library is distributed in the hope that it will be useful,\n"
"     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
"     * Lesser General Public License for more details.\n"
"     *\n"
"     * You should have received a copy of the GNU Lesser General Public\n"
"     * License along with this library; if not, write to the Free "
"Software\n"
"     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  "
"02110-1301  USA\n"
"     */"
msgstr ""

msgid ""
"module pipe(id,od,l){\n"
"        difference(){\n"
"            cylinder(r=od/2,h=l,center=true);\n"
"            cylinder(r=id/2,h=l+1,center=true);\n"
"        }\n"
"    }"
msgstr ""

msgid "### Putting the scad file to the right place"
msgstr ""

msgid ""
"The file with the module should be moved to a subdirectory of the "
"openscad\n"
"directory which is named after the collection id to which the part "
"belongs. If\n"
"this directory does not exist, create it."
msgstr ""

msgid ""
"So in the case of the pipes collection `pipe.scad` is now in the "
"directory\n"
"`openscad/pipes` relative to the BOLTS root folder."
msgstr ""

msgid ""
"This collection directory must also contain the base file for this "
"directory.\n"
"The base file provides BOLTS with all the informations it needs to know "
"about\n"
"the files in a collection directory, it is a kind of manifest file. It\n"
"contains a list of sections \n"
"(more precisely [base file elements]({{ spec(base-file-element) }})),\n"
"each describing one file."
msgstr ""

msgid ""
"For the pipes collection the base file is `openscad/pipes/pipes.base` and"
" has\n"
"the following content:"
msgstr ""

msgid ""
"---\n"
"    - filename: pipe.scad\n"
"      type: module\n"
"      author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"      license: LGPL 2.1+ <http://www.gnu.org/licenses/lgpl-2.1>\n"
"      modules:\n"
"        - name: pipe\n"
"          arguments: [id, od, l]\n"
"          classids: [genericpipe, din11850range2]\n"
"      source: own work\n"
"    ..."
msgstr ""

msgid ""
"The type field indicates, that this file contains one or more OpenSCAD\n"
"modules. The author field gives the author of `pipe.scad` and contact\n"
"information. In the license field the license of pipe.scad is indicated "
"and\n"
"then follows the list of modules that are contained in the file."
msgstr ""

msgid ""
"In the case of `pipe.scad` there is only one module called `pipe`. The\n"
"arguments field gives the parameters that need to be supplied to the "
"module.\n"
"The parameters must be a subset of the parameters of the class as it is\n"
"defined in the [blt file]({{ doc(general,blt-files) }})."
msgstr ""

msgid ""
"The `classids` field contains a list of classids which this module can\n"
"represent. Be careful, that the parameter names and meanings for all "
"classes\n"
"in this list must be the same, otherwise the some parameters can not be "
"found\n"
"for some classes."
msgstr ""

msgid ""
"Now it should be tested that the newly added part really works. This is "
"most\n"
"conveniently done using the \n"
"[utility script]({{ doc(general,utility-script) }}):"
msgstr ""

msgid ""
"./bolts.py export openscad\n"
"    ./bolts.py test openscad"
msgstr ""

msgid ""
"This will fire up a OpenSCAD instance with the module search path set\n"
"appropriately, so that typing"
msgstr ""

msgid "include <BOLTS.scad>"
msgstr ""

msgid "DIN11850_Range_2(\"10\",1000);"
msgstr ""

msgid "should give you a pipe with nominal diameter 10 and 1m length."
msgstr ""

msgid "### Adding connectors"
msgstr ""

msgid ""
"[Connectors]({{ doc(openscad,usage) }})\n"
"simplify the positioning of parts in OpenSCAD, but require a bit of\n"
"preparation. Three things need to be added: A function for the connectors"
"\n"
"and a entry in the base file and drawings for the documentation."
msgstr ""

msgid ""
"The function is added to the `.scad` file, and calculates the position "
"and\n"
"orientation for the various connector locations from the parameters of "
"the\n"
"model. It returns a list containing as first element the origin of the\n"
"coordinate system in terms of global coordinates, as second element a "
"list with\n"
"two directions for the first and second direction of the connector. In "
"case the\n"
"direction is unknown, the function should return \"Error\"."
msgstr ""

msgid "For the pipes ths function could look like this:"
msgstr ""

msgid ""
"function pipeConn(l,location) =\n"
"    \t(location == \"front-in\")  ? [[0,0,-l/2],[[0,0,1],[1,0,0]]] :\n"
"    \t(location == \"front-out\") ? [[0,0,-l/2],[[0,0,-1],[-1,0,0]]] :\n"
"    \t(location == \"back-in\")   ? [[0,0,+l/2],[[0,0,-1],[-1,0,0]]] :\n"
"    \t(location == \"back-out\")  ? [[0,0,+l/2],[[0,0,1],[1,0,0]]] :\n"
"    \t\"Error\";"
msgstr ""

msgid ""
"Here only the origin of the connector depends on the length of the pipe, "
"but\n"
"for other locations other parameters might be required. The function can "
"make\n"
"use of all parameters that are available to the geometry modules in "
"addition to\n"
"the location, and the order in which these are passed to the function is "
"not\n"
"relevant."
msgstr ""

msgid ""
"To tell BOLTS about this and things like the available selection of "
"locations\n"
"available. This is done by a additional field in the base file. The "
"entries are\n"
"selfexplanatory, so here is the content of the base file with the "
"connector\n"
"infos:"
msgstr ""

msgid ""
"---\n"
"    - filename: pipe.scad\n"
"      type: module\n"
"      author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"      license: LGPL 2.1+ <http://www.gnu.org/licenses/lgpl-2.1>\n"
"      modules:\n"
"        - name: pipe\n"
"          arguments: [id, od, l]\n"
"          classids: [genericpipe, din11850range2]\n"
"          connectors:\n"
"            name: pipeConn\n"
"            arguments: [l,location]\n"
"            locations: [front-in, front-out, back-in, back-out]\n"
"      source: own work\n"
"    ..."
msgstr ""

msgid ""
"This is a good time to test again. You can use the utility script like "
"shown\n"
"[earlier]({{ doc(openscad,basemodule) }}). Make sure all\n"
"connectors are where they should be and that this remains the case when "
"you use\n"
"a range of parameters."
msgstr ""

msgid ""
"The final thing to do is create drawings for the connectors to visually "
"show\n"
"their location for easy reference. The utility script can do most of the "
"heavy\n"
"lifting, by creating OpenSCAD scripts for each location that shows the "
"part\n"
"together with the connector there."
msgstr ""

msgid "./bolts.py connectors"
msgstr ""

msgid ""
"This results in a directory called `connectordrawings` in the output "
"directory.\n"
"It contains BOLTS for OpenSCAD and a directory called scad that contains "
"scad\n"
"files for all classes with connectors that have no drawings.  All that "
"remains\n"
"to do is to load these scripts into OpenSCAD, find a good angle and "
"export a\n"
"png using `Design->export as image...`. Make sure that it is easy to "
"understand\n"
"from the picture where the connector is located on the part, and how it "
"is\n"
"oriented.The images go into the `pipes` subdirectory of the `drawings` "
"folder."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Finding a good angle\" src=\"{{ static(openscad-"
"connectordrawings.png) }}\" style=\"width: 100%%;\"/>]({{ static"
"(openscad-connectordrawings.png) }})"
msgstr ""

msgid ""
"The final step is to add entries to the base file in this folder to tell "
"BOLTS\n"
"about all the drawings. Here is an example how it looks for the `front-"
"in`\n"
"connector:"
msgstr ""

msgid ""
"- filename: pipe-back-in\n"
"      author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"      license: CC0 1.0 "
"<http://creativecommons.org/publicdomain/zero/1.0/>\n"
"      type: drawing-connector\n"
"      location: back-in\n"
"      source: own work\n"
"      classids: [genericpipe,din11850range2]"
msgstr ""

msgid ""
"You should add your name as author. The license should be chosen to CC0, "
"as\n"
"this makes things easier. `type` must be `drawing-connector`."
msgstr ""

msgid "To check that everything went fine, you can use"
msgstr ""

msgid "./bolts.py tasks"
msgstr ""

msgid ""
"and make sure that the classes you have been working on are not listed "
"anymore\n"
"with `Missing Connectors` and `Missing Drawings`."
msgstr ""

msgid ""
"You might want to [contribute]({{ doc(general,development) }}) this\n"
"part to BOLTS, so that every user can profit from your efforts."
msgstr ""

#. document title
msgid "How to make a nice drawing for BOLTS"
msgstr ""

msgid "### Prerequisites"
msgstr ""

msgid ""
"You need to have installed [FreeCAD](http://freecadweb.org/) and [BOLTS "
"for\n"
"FreeCAD]({{ doc(freecad,installation) }}) and the free Vector Graphics "
"Editor\n"
"[Inkscape](http://inkscape.org/)."
msgstr ""

msgid ""
"If the part for which you want to create the drawing is not in BOLTS for\n"
"FreeCAD, you also need [OpenSCAD](http://www.openscad.org/) and [BOLTS "
"for\n"
"OpenSCAD]({{ doc(openscad,installation) }})."
msgstr ""

msgid "### Follow this guide and contribute"
msgstr ""

msgid ""
"There is a [list of classes]({{ url(main.tasks) }}) for which no drawing "
"is\n"
"available. You are invited to pick one, follow this guide and contribute "
"the\n"
"result."
msgstr ""

msgid "### Scope"
msgstr ""

msgid ""
"The main purpose of drawings in BOLTS is to give a quick visual "
"explanation of\n"
"the meaning of the parameters of the class. It is not a full-fledged "
"technical\n"
"drawing, whose purpose is to provide all the informations necessary to "
"produce\n"
"the part. Nevertheless we borrow some conventions and techniques from "
"technical\n"
"drawings."
msgstr ""

msgid "### Loading a part"
msgstr ""

msgid ""
"Depending on whether the part for your drawing is available in BOLTS for\n"
"FreeCAD or BOLTS for OpenSCAD, the first steps of this process differ."
msgstr ""

msgid ""
"It is a bit easier to work with parts from BOLTS for FreeCAD, because the"
"\n"
"drawing is mostly created in FreeCAD."
msgstr ""

msgid ""
"If your part is available in BOLTS for FreeCAD, you have to start with "
"the next\n"
"step."
msgstr ""

msgid ""
"If your part is only in BOLTS for OpenSCAD, you have to skip the next "
"step and\n"
"continue at \"Loading a part from BOLTS for OpenSCAD\"."
msgstr ""

msgid "### Loading a part from BOLTS for FreeCAD"
msgstr ""

msgid ""
"You can skip this step if you want to create a drawing for a part that is"
" only\n"
"in BOLTS for OpenSCAD."
msgstr ""

msgid ""
"Start FreeCAD. Add a part of the class for which you want to create the\n"
"drawing, as described [here]({{ doc(freecad,usage) }}). The value of the\n"
"parameters does not matter too much, the default values will be usually "
"fine."
msgstr ""

msgid "### Exporting a part from BOLTS for OpenSCAD"
msgstr ""

msgid "You can skip this step if you have executed the previous step."
msgstr ""

msgid ""
"FreeCAD has the ability to load a part from a CSG file created by "
"OpenSCAD. To\n"
"create such a file, fire up OpenSCAD, and type in the following short "
"piece of\n"
"code"
msgstr ""

msgid ""
"include <BOLTS.scad>\n"
"    ISO7089();"
msgstr ""

msgid ""
"The first line includes the BOLTS library. The second line creates a\n"
"part, in this case [a washer]({{ standard_url(ISO7089) }})."
msgstr ""

msgid ""
"If you hit F5, or select Design->Compile, the part should appear in the "
"preview\n"
"window. You can now export the part to a CSG file by choosing "
"Design->Export as\n"
"CSG...."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Part from BOLTS in OpenSCAD\" src=\"{{ "
"static(openscad_drawing2.png) }}\" style=\"width: 100%%;\"/>]({{ "
"static(openscad_drawing2.png) }})"
msgstr ""

msgid ""
"Save the file to some place where you can find it again, it is only "
"temporary\n"
"and you can remove it afterwards."
msgstr ""

msgid "You can close OpenSCAD now."
msgstr ""

msgid "### Loading a CSG file into FreeCAD"
msgstr ""

msgid ""
"Start FreeCAD. Then select File->Open and select the CSG file that you "
"created in the previous step."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Loading a CSG file into FreeCAD\" src=\"{{ "
"static(openscad_drawing3.png) }}\" style=\"width: 100%%;\"/>]({{ "
"static(openscad_drawing3.png) }})"
msgstr ""

msgid "The part should now be visible in the preview window."
msgstr ""

msgid "### Create a drawing"
msgstr ""

msgid ""
"You should now have a document with the part for which you want to create"
" the\n"
"drawing, and this should be the active object in this document (the one "
"shown\n"
"in boldface letters in the combo view)."
msgstr ""

msgid "Now we can use the python console in FreeCAD to create a drawing:"
msgstr ""

msgid ""
"import BOLTS\n"
"    obj = FreeCAD.ActiveDocument.ActiveObject\n"
"    BOLTS.make_drawing(4.5,obj)"
msgstr ""

msgid ""
"The first line starts BOLTS for FreeCAD (see also\n"
"[here]({{ doc(freecad,usage) }}), the second one creates a variable "
"containing\n"
"the part and the third line calls a helper function from the BOLTS module."
msgstr ""

msgid ""
"This helper function has two parameters, a scaling factor and the object,"
" and\n"
"it creates a new drawing from the BOLTS template and inserts various "
"views on\n"
"the object."
msgstr ""

msgid "Now an additional object should have vanished in the combo view, a page."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Finished drawing of washer\" src=\"{{ static(drawing1.png) "
"}}\" style=\"width: 100%%;\"/>]({{ static(drawing1.png) }})"
msgstr ""

msgid ""
"You can open it in a new drawing viewer by double clicking on it. There "
"will be\n"
"nothing visible, because the drawing needs to be recomputed, which you "
"can do\n"
"by pressing the keys Ctrl-r."
msgstr ""

msgid ""
"Now you should see a page with the BOLTS logo in the lower right corner, "
"and\n"
"different views on the object. If the scaling factor that you used was "
"too big\n"
"or too small, you notice now. It is good to have a bit of space between "
"the\n"
"different views to add dimensions, but the part should be not too tiny."
msgstr ""

msgid ""
"If the scaling factor was not good, you can close the Drawing Viewer, "
"delete\n"
"the Page Object from the Combo View and type the last line again, with an"
"\n"
"adjusted scaling factor."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Finished drawing of washer\" src=\"{{ static(drawing2.png) "
"}}\" style=\"width: 100%%;\"/>]({{ static(drawing2.png) }})"
msgstr ""

msgid ""
"When you are happy with the drawing, change to the Drawing Workbench, "
"make sure\n"
"the page object is selected in the Combo View and then choose "
"Drawing->Export\n"
"Page (or use the button in the Drawing toolbar)."
msgstr ""

msgid "Save it somewhere where you can find it again."
msgstr ""

msgid "### Post processing in Inkscape"
msgstr ""

msgid ""
"Now we need to add dimensions to the drawing, this is best done in "
"Inkscape.\n"
"Open the svg file from the previous step in Inkscape."
msgstr ""

msgid ""
"In the case of the washer, there are three dimensions: the inner and "
"outer\n"
"diameters and the thickness."
msgstr ""

msgid ""
"Now it is convenient to add a few guidelines by left-clicking on the "
"rulers at\n"
"the sides and dragging into the picture. Depending on where you click you"
" can\n"
"get horizontal (top), vertical (left) and diagonal (corner) guidelines."
msgstr ""

msgid ""
"The guidelines are added in such way that they are convenient for the\n"
"dimensions. The image below shows a possible choice: The inner diameter "
"will be\n"
"indicated on the left side of the front view, the outer below. The "
"thickness\n"
"will be indicated on the left side view."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Guidelines\" src=\"{{ static(drawing3.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(drawing3.png) }})"
msgstr ""

msgid ""
"Select the bezier line tool (Shift-F6 or the corresponding icon). Then "
"click on\n"
"one of the guidelines, press Ctrl to lock in the angle to vertical or\n"
"horizontal and then click on the other guideline. The cursor should snap "
"to the\n"
"guideline. Now finish the path by pressing Enter. Repeat for all "
"dimensions."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Raw dimension lines\" src=\"{{ static(drawing4.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(drawing4.png) }})"
msgstr ""

msgid ""
"To convert these lines into nice dimensions open the fill and stroke "
"dialog\n"
"using Object->Fill and Stroke and select the Stroke Style tab. Change to "
"the\n"
"selection cursor (arrow icon in the toolbar), select one of your lines "
"and do\n"
"the following three things:"
msgstr ""

msgid ""
"1. Change the width to 0.4 px\n"
"2. For Start Markers select DistanceStart\n"
"3. For End Markers select DistanceEnd"
msgstr ""

msgid ""
"If the Markers go in the wrong direction (away from the object), choose\n"
"Object->Flip Horizontal or Object->Flip Vertical, depending on the "
"orientation\n"
"of your dimension."
msgstr ""

msgid ""
"If the dimension is very small (like the thickness of the washer), put\n"
"DistanceEnd as Start Marker and DistanceStart as End Marker."
msgstr ""

msgid "Repeat for all lines."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Dimension lines\" src=\"{{ static(drawing5.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(drawing5.png) }})"
msgstr ""

msgid ""
"Then choose the text tool in the toolbar on the left and add the "
"dimension\n"
"names. You can look them up on the\n"
"[Specification page]({{ standard_url(ISO7089) }}) by following\n"
"the source url or by checking the blt file."
msgstr ""

msgid ""
"In the case of the washer we have inner diameter d1, outer diameter d2 "
"and\n"
"thickness s."
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Dimension lines with labels\" src=\"{{ static(drawing6.png) "
"}}\" style=\"width: 100%%;\"/>]({{ static(drawing6.png) }})"
msgstr ""

msgid ""
"Now remove the guidelines by hovering over them until they change color "
"and\n"
"then pressing delete."
msgstr ""

msgid "### Filenames and PNG export"
msgstr ""

msgid ""
"Now we can save-as the svg to its final destination. The filename is "
"arbitrary\n"
"in principle, but follows a few conventions:"
msgstr ""

msgid ""
"* The drawing goes in the drawings directory, in a subfolder named like "
"the id of\n"
"  the collection to which the part belongs. If the same drawing can be "
"used for\n"
"  parts from different collections, save the same file multiple times.\n"
"* If the drawing applies to more than one class, then the filename should"
"\n"
"  follow the (function/file/module) name of the base. This can be looked "
"up in\n"
"  the base files. Be careful that also the parameter names have to be the"
" same\n"
"  across all classes.\n"
"* Otherwise the filename should follow the class id, which can be looked\n"
"  up on the specification page."
msgstr ""

msgid ""
"For the washer, the collection id is `washer`, and the drawing applies to"
"\n"
"multiple classes of the collection, so we choose the name of the base, "
"which is\n"
"`washer1`."
msgstr ""

msgid "So the filename for the svg file is `drawings/washer/washer1.svg`."
msgstr ""

msgid ""
"We also want a png version of the drawing, so we choose `File->Export "
"Bitmap`,\n"
"select Page for the export area and set the resolution to 300dpi. The "
"filename\n"
"is the same as the one for the svg, just with extension `.png`. Clicking "
"on\n"
"export exports the file, but does not close the dialog, which must be "
"closed\n"
"manually."
msgstr ""

msgid "Now we are done and can close Inkscape again."
msgstr ""

msgid "### update the base file"
msgstr ""

msgid ""
"The last step is to tell BOLTS about the drawing in the base file of the\n"
"drawing directory by adding an entry of the form:"
msgstr ""

msgid ""
"- filename: washer1\n"
"      author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"      license: CC0 1.0 "
"<http://creativecommons.org/publicdomain/zero/1.0/>\n"
"      type: drawing-dimensions\n"
"      source: own work\n"
"      classids: [plainwasher1, plainwasher2, plainwasherforcheesehead, "
"heavydutyplainwasher]"
msgstr ""

msgid ""
"where classids is a list of classes that are covered by this drawing. The"
"\n"
"filename is relative to the subdirectory of the collection and given "
"without\n"
"extension to cover both svg and png versions. The type field "
"distinguishes\n"
"drawings that explain the parameters and dimensions of a part from other "
"images\n"
"that e.g. show [the location of connectors]({{ doc(openscad,basemodule) "
"}}#adding_connectors)"
msgstr ""

#. document title
msgid "BOLTS development with git"
msgstr ""

msgid ""
"BOLTS consists of quite a lot of code and data and to manage this code "
"and data\n"
"and the changes made to it, [git](http://www.git-scm.com) is used. Git is"
" a\n"
"distributed version control system and this allows everybody who wants to"
" work\n"
"with git to obtain a version of BOLTS (called a fork), that is separate "
"from\n"
"the main version, so that it is possible to play around, add parts and "
"develop\n"
"new features without breaking the master branch. git then makes it very "
"easy to\n"
"move the changes made in one branch to the master branch."
msgstr ""

msgid ""
"There exist many different workflows and ways how to develop software "
"with git.\n"
"I will present three different ways that I consider useful for the "
"purpose of\n"
"contributing to BOLTS. For more information see the [git\n"
"documentation](http://www.git-scm.com) or the [GitHub\n"
"documentation](https://help.github.com/)."
msgstr ""

msgid "### Using the GitHub web interface"
msgstr ""

msgid ""
"For this way you need a [GitHub](https://github.com/) account. It is "
"probably\n"
"the easiest way to make small corrections and additions, and works well "
"for all\n"
"tasks that involve editing and creating text files."
msgstr ""

msgid ""
"Go to the [BOLTS repository page](https://github.com/jreinhardt/BOLTS), "
"there\n"
"you see a list of all files and directories and you can navigate around "
"by\n"
"clicking on them."
msgstr ""

msgid ""
"To edit a file just click on it, and then use the `Edit` button to open "
"the web\n"
"based editor. You can now make your changes. When you are done, scroll to"
" the\n"
"bottom of the page and add a short description, and a longer explanation "
"about\n"
"what you changed if necessary. Try to use precise language and avoid "
"having\n"
"unrelated changes in one commit (like fixing a typo and adding a new "
"class)."
msgstr ""

msgid ""
"Alternatively you can add a new file by clicking on the small `+` next to"
" the\n"
"repository name. A editor page opens, and you can give a filename and "
"start\n"
"typing contents."
msgstr ""

msgid ""
"Finally hit the `Commit Changes` button at the bottom of the page. GitHub"
" will\n"
"now automatically fork the BOLTS and create a new commit with the changes"
" you\n"
"just made."
msgstr ""

msgid ""
"On the next page you are asked whether you want to offer your changes to "
"the\n"
"BOLTS maintainer, this is called a pull request. If your changes are more"
"\n"
"substantial, you should add a short explanation, why you think these "
"changes\n"
"should go into the main branch. You can then send the pull request."
msgstr ""

msgid ""
"The maintainer can now look at your changes, decide whether he wants them"
" in\n"
"the main branch, give you feedback and ask for further modifications."
msgstr ""

msgid "### Checking out a GitHub fork"
msgstr ""

msgid ""
"For this way you also need a [GitHub](https://github.com/) account. It "
"allows\n"
"you also to work offline. This way requires you to work with the "
"commandline."
msgstr ""

msgid ""
"This way will also create a fork of BOLTS on the GitHub server, but\n"
"additionally you will also obtain a fork on your own computer. You make "
"changes\n"
"to the one on your own computer and then communicate these changes back "
"to the\n"
"GitHub fork. This way you can work offline, you only need to be online to"
" push\n"
"your changes."
msgstr ""

msgid ""
"Before you start you should \n"
"[install and set up git](https://help.github.com/articles/set-up-git)\n"
"supplying it with your name and email address, so that your contributions"
" can\n"
"be attributed to you."
msgstr ""

msgid ""
"There is a \n"
"[pretty good tutorial how to fork a "
"repository](https://help.github.com/articles/fork-a-repo)\n"
"on the [GitHub help pages](https://help.github.com/),\n"
" where you can also find more informations about working with git and "
"GitHub."
msgstr ""

msgid ""
"The next steps are explained in the section about `Creating topic "
"branches and\n"
"commiting your work`."
msgstr ""

msgid "### Checking out a local copy of BOLTS"
msgstr ""

msgid ""
"For this way you do not need a GitHub account, and it allows you to work\n"
"offline. In contrast to working with a GitHub fork, your proposed changes"
" are\n"
"not published online, but sent to the maintainer by email."
msgstr ""

msgid ""
"To obtain a local version of the BOLTS git repository fire up the "
"commandline,\n"
"change to the directory where you want to store the BOLTS repository and "
"type"
msgstr ""

msgid "git clone git@github.com:jreinhardt/BOLTS.git"
msgstr ""

msgid ""
"a new directory named `BOLTS` will be created that contains the current\n"
"development state."
msgstr ""

msgid "### Creating topic branches and commiting your work"
msgstr ""

msgid ""
"You now should have a local copy of BOLTS. Before you start making "
"changes, you\n"
"should create a new branch. There is a quite detailed description about\n"
"branches on the \n"
"[git-scm website](http://git-scm.com/book/en/Git-Branching).\n"
"In short, a branch is like a parallel universe of the source code. This "
"allows\n"
"you to work on independent changes (like adding a new collection and "
"writing\n"
"base modules for another one) in parallel, by storing them in separate\n"
"branches. But if you do not want to work in parallel, it boils down to a "
"few\n"
"commands that you use before and after you did your changes."
msgstr ""

msgid "To create a new branch type on the commandline"
msgstr ""

msgid "git checkout -b \"branchname\""
msgstr ""

msgid ""
"and replace branchname by a short descriptive name like\n"
"\"steppermotorcollection\", if you want to add a new collection for "
"stepper\n"
"motors or \"hexsocketbases\" if you want to add base geometries for the "
"hexsocket\n"
"collection. A branch that is used to work on a certain feature is called "
"a\n"
"topic branch."
msgstr ""

msgid "If you now type"
msgstr ""

msgid "git status"
msgstr ""

msgid "it tells you which branch you are on"
msgstr ""

msgid ""
"# On branch steppermotorcollection\n"
"    ..."
msgstr ""

msgid "To switch branches you can use"
msgstr ""

msgid "git checkout branchname"
msgstr ""

msgid ""
"Before you edit files, make sure you are in your topic branch. To record "
"a set\n"
"of changes, you first \"add\" the changed or new files that you want to "
"include\n"
"in the commit by"
msgstr ""

msgid ""
"git add filename\n"
"    git add filename2\n"
"    git add filename3 filename4"
msgstr ""

msgid "with"
msgstr ""

msgid ""
"you can get a list of changed files that will be commited and those that "
"will\n"
"not be commited. Finally, to commit the added changes use"
msgstr ""

msgid "git commit"
msgstr ""

msgid ""
"A editor opens and you can enter a description of the changes. The first "
"line\n"
"is a short description. If the changes deserve a more detailes "
"explanation, one\n"
"can be added after a empty line."
msgstr ""

msgid ""
"Usually one structures the work on one feature into a series of commits "
"that do\n"
"simple changes each. A rule of thumb is: If you cannot precisely describe"
" the\n"
"changes in one line, you should consider to split it into smaller commits."
msgstr ""

msgid ""
"If you have finished the work on your feature you submit the changes  "
"either by\n"
"fire off a pull request, or by creating a bundle and send it by mail to "
"the\n"
"maintainer."
msgstr ""

msgid "### Sending a pull request"
msgstr ""

msgid "To push your topic branch to GitHub, you use"
msgstr ""

msgid ""
"git checkout branchname\n"
"    git push -u origin branchname"
msgstr ""

msgid ""
"This creates a new branch called branchname on your BOLTS fork on GitHub."
" If you make more changes on this topic branch (maybe on request of the "
"maintainer), you can use just"
msgstr ""

msgid "git push origin branchname"
msgstr ""

msgid ""
"The initiation of a pull request on GitHub is covered very well by \n"
"[this tutorial](https://help.github.com/articles/using-pull-requests)."
msgstr ""

msgid "### Creating a bundle"
msgstr ""

msgid ""
"Another possibility to contribute your changes is to create a bundle file"
"\n"
"containing all the commits you added."
msgstr ""

msgid "To create the bundle use"
msgstr ""

msgid "git bundle create branchname.bundle origin/master..branchname"
msgstr ""

msgid "but replace branchname by the name of your branch."
msgstr ""

msgid ""
"The resulting file can be attached to an email with a description what "
"this\n"
"does and then send it to\n"
"<a href=\"mailto:BOLTS@ist-dein-freund.de\">BOLTS@ist-dein-freund.de</a>."
msgstr ""

#. document title
msgid "What licenses can be used in BOLTS"
msgstr ""

msgid "### The problem"
msgstr ""

msgid ""
"BOLTS is intended as very contribution driven project. Is is also quite "
"flexible from a technical point of view, which allows to incorporate "
"content like OpenSCAD module, FreeCAD python functions, FreeCAD Models or"
" STL files that were not specifically created for BOLTS with minimal "
"changes."
msgstr ""

msgid ""
"While this is great as it allows to reuse a lot of work already done, it "
"creates another problem: One has to make sure that the licenses of the "
"different parts are compatible with each other and that the use of parts "
"from BOLTS in an assembly does not pose license restrictions on the "
"result. Also we want to make sure that the resulting distribution of "
"files can be distributed under a open source license."
msgstr ""

msgid ""
"I did a bit of reading in the last few days, and now I want to describe "
"how to handle these problems in BOLTS. As a disclaimer I want to add that"
" I am not a lawyer, so everything that follows is given without any "
"warranties and might be wrong. If in doubt, ask someone who is qualified "
"to answer such questions."
msgstr ""

msgid "### The components of BOLTS and their licenses"
msgstr ""

msgid ""
"BOLTS consists of a number of different parts that work together in "
"different ways:"
msgstr ""

msgid ""
"* [bolttools](https://github.com/jreinhardt/bolttools) is a collection of"
" python modules that handle various tasks and aspects of the processes in"
" BOLTS: create HTML documentation, parse the blt and base files, perform "
"consistency checks on the parts and assemble the different distributions "
"(BOLTS for FreeCAD, BOLTS for OpenSCAD). bolttools is developed by me and"
" licensed under the [LGPL 2.1 or later](http://www.gnu.org/licenses/old-"
"licenses/lgpl-2.1)."
msgstr ""

msgid ""
"* the blt files are YAML files that contain not backend specific data and"
" metadata about the part (more precisely about classes of parts, because "
"there is often a large amount of redundancy). These files contain among "
"other informations the tables with dimensions, and form the foundation of"
" BOLTS. Its license is chosen by the creator."
msgstr ""

msgid ""
"* the backend specific data is specific to the CAD application (FreeCAD "
"or OpenSCAD at the moment), and can come in two forms: as code (OpenSCAD "
"modules or FreeCAD python functions) or as data (stl files for OpenSCAD "
"or fcstd files for FreeCAD. Its license is chosen by the creator."
msgstr ""

msgid "### Combined works and generated code"
msgstr ""

msgid ""
"When we put together a distribution consisiting of all these files with "
"different licenses, what license has the result? This is a difficult "
"question, and in fact there are many licenses with conflicting terms, so "
"that they can not be combined at all."
msgstr ""

msgid ""
"We want to focus on open source licenses, and luckily someone who knows "
"[explained the situation there very well](http://www.dwheeler.com/essays"
"/floss-license-slide.html). In particular I like the graph on this page."
msgstr ""

msgid ""
"And when we take some content with a certain license A and process it "
"with a program with a certain license B, what license C has the result?"
msgstr ""

msgid ""
"This is much easier to answer, and again I reference [people who "
"know](http://www.gnu.org/licenses/gpl-faq.html#GPLOutput). The result has"
" license A, unless very specifc conditions apply."
msgstr ""

msgid "### Consequences for BOLTS distributions"
msgstr ""

msgid ""
"In BOLTS we have both of these mechanisms, in combination that depends on"
" the target CAD system:"
msgstr ""

msgid "#### FreeCAD"
msgstr ""

msgid ""
"The BOLTS for FreeCAD distribution consists of the blt files, bolttools "
"(for parsing them) and the FreeCAD backend specific files, so it "
"represents a combined work consisting of these three parts."
msgstr ""

msgid ""
"Focusing on the most popular OpenSource licenses (the one discussed "
"[her](http://www.dwheeler.com/essays/floss-license-slide.html)), that "
"means that for the BOLTS for FreeCAD distribution we have to choose a "
"license, that is reachable from every license of the components. As "
"bolttools is one of the components, this means that this license can not "
"be more liberal then LGPL 2.1+."
msgstr ""

msgid ""
"If there are blt files of backend specific files that are licensed under "
"a less liberal license (e.g. GPL 3), than the whole distribution must be "
"licensed as GPL 3."
msgstr ""

msgid ""
"Therefore BOLTS for FreeCAD provides LGPL and GPL distributions, where in"
" the former all components incompatible with the LGPL are removed. This "
"means that the GPL distribution contains more parts, but is only "
"available under a less liberal license."
msgstr ""

msgid ""
"If the FreeCAD people decided that they want to integrate BOLTS into "
"FreeCAD (FreeCAD is licensed under LGPL), they would form a combined work"
" of FreeCAD and BOLTS. There are two possibilities. Either they integrate"
" the LGPL BOLTS distribution, which contains less parts, or they "
"integrate the GPL BOLTS distribution and change the FreeCAD license to "
"GPL."
msgstr ""

msgid "#### OpenSCAD"
msgstr ""

msgid ""
"The BOLTS for OpenSCAD distribution works a bit differently. It consists "
"out of the OpenSCAD backend specific files, OpenSCAD code containing the "
"tables and generated glue code."
msgstr ""

msgid ""
"The table and glue code is generated by bolttools from the blt files, so "
"this code has the same license as the blt files. The backend specific "
"files have the license that their creator chose. And BOLTS for OpenSCAD "
"is a combined work of all these parts, which tells us again what licenses"
" we can choose for the result, or which components we have to leave out "
"of the distribution to be able to license it under a specific license."
msgstr ""

msgid ""
"Note that BOLTS for OpenSCAD does not contain bolttools, so in principle "
"a BOLTS for OpenSCAD distribution with a license more liberal than LGPL "
"is possible. However, there are some helper and utility modules that are "
"always included, which are at the moment licensed under LGPL 2.1+. But "
"(in contrast to bolttools) I could imagine to relicense these under a "
"more liberal license, if there is a need for it (e.g. a lot of liberally "
"licensed code being contributed)."
msgstr ""

msgid "### Consequences for content created using BOLTS"
msgstr ""

msgid ""
"But the same considerations have to be applied to the case, when someone "
"uses BOLTS for OpenSCAD or FreeCAD to to create a nice design. This "
"design is a combined work consisting of the content that the user "
"created, and the parts provided by BOLTS. So does this pose restrictions "
"on the license of the design?"
msgstr ""

msgid ""
"This would be rather drastic, as that would severely limit the choice of "
"licenses the user could assign to its design. This would limit the "
"audience and the usefulness of BOLTS massively, so this is something that"
" should be avoided."
msgstr ""

msgid ""
"I mentioned earlier, that there is application specific data in form of "
"code and in form of data. These two cases have to be distinguished:"
msgstr ""

msgid "#### Backend specific data in form of code"
msgstr ""

msgid ""
"In this case on can consider the part as the result of a program (BOLTS),"
" which is not affected by the license of the programm. So parts created "
"by code (FreeCAD python functions and OpenSCAD modules) cause no "
"licensing related restrictions on the resulting design."
msgstr ""

msgid "#### Backend specific data in form of data"
msgstr ""

msgid ""
"In this case on has to consider the final design as a combined work "
"between the part (in form of a FreeCAD fcstd file or a STL file) and the "
"rest of the design that the user created. If the BOLTS part were licensed"
" under a fairly restrictive license like GPL, the whole design would need"
" to be licensed under the GPL."
msgstr ""

msgid ""
"As this is undesireable, BOLTS must not contain backend specific data in "
"form of data that causes such restrictions. This means, that such data "
"must be placed in the public domain, or better yet, the author must waive"
" all rights on this content using "
"[CC0](http://creativecommons.org/about/cc0). The latter is a legally more"
" sound procedure, as the public domain is a legal concept that does not "
"exist in all legislations."
msgstr ""

msgid "### Consequences for BOLTS itself"
msgstr ""

msgid ""
"I want to be able to consider the whole of BOLTS, i.e. all the content "
"that is contained in the [BOLTS git "
"repo](https://github.com/jreinhardt/BOLTS) as a single combined work. I "
"am not sure whether that is really necessary, but I could imagine that it"
" might be necessary for things like a bolts-dev Debian package. At the "
"moment BOLTS is licensed under GPL 3.0+, as this is the most restrictive "
"license of all components."
msgstr ""

msgid ""
"However this makes it necessary to exclude GPL 2.0 (without the or any "
"later version clause) material, as this can not be combined with GPL 3.0+"
" material."
msgstr ""

msgid "### Realisation"
msgstr ""

msgid ""
"These are a lot of complicated rules, and one is tempted to keep it "
"simple and either require all contributions to be under a specific "
"license, or to license BOLTS under the most restrictive license of all "
"components."
msgstr ""

msgid ""
"However, one would then ignore a lot of possibly useful content that is "
"already existing and could be incorporated easily, or one ends up with a "
"very restrictive license for BOLTS, which limits its audience by e.g. "
"prohibiting the inclusion in FreeCAD."
msgstr ""

msgid ""
"Therefore I tried to design BOLTS in such a way, that the work of "
"assembling distributions that are compatible to a certain license can be "
"automated. The license of each part is available in machine readable form"
" in the .blt and .base files, which allows to decide programmatically "
"whether something can be included in a distribution or not."
msgstr ""

msgid "This results in the following license policy for contributions:"
msgstr ""

msgid ""
"A contribution in form of a blt file or backend specific data in form of "
"code can have one of the following licenses:"
msgstr ""

msgid ""
"* [CC0 1.0](http://creativecommons.org/publicdomain/zero/1.0/)\n"
"* [Public Domain]({{ url(main.public_domain) }})\n"
"* [MIT](http://opensource.org/licenses/MIT)\n"
"* [BSD 3-clause](http://opensource.org/licenses/BSD-3-Clause)\n"
"* [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n"
"* [LGPL 2.1](http://www.gnu.org/licenses/old-licenses/lgpl-2.1)\n"
"* [LGPL 2.1+](http://www.gnu.org/licenses/old-licenses/lgpl-2.1)\n"
"* [LGPL 3.0](http://opensource.org/licenses/LGPL-3.0)\n"
"* [LGPL 3.0+](http://opensource.org/licenses/LGPL-3.0)\n"
"* [GPL 2.0+](http://www.gnu.org/licenses/old-licenses/gpl-2.0)\n"
"* [GPL 3.0](http://www.gnu.org/licenses/gpl-3.0)\n"
"* [GPL 3.0+](http://www.gnu.org/licenses/gpl-3.0)"
msgstr ""

msgid ""
"A contribution in form of backend specific data in form of data must be "
"in the public domain or [CC0 "
"1.0](http://creativecommons.org/publicdomain/zero/1.0/)."
msgstr ""

msgid ""
"From all available .blt files and backen specific data, distributions "
"with specific licenses are created automatically."
msgstr ""

#. document title
msgid "How to work with blt files"
msgstr ""

msgid ""
"blt files contain most of the backend independent data. There is one blt "
"file\n"
"for each each collection, which provides the information about all the "
"classes\n"
"of the collection."
msgstr ""

msgid "### Creating a new collection"
msgstr ""

msgid ""
"To create a new collection a new file with extension blt needs to be "
"created in\n"
"the `data` directory of the BOLTS repository. This file is a\n"
"[YAML](http://yaml.org/) file and contains a license header, a collection"
"\n"
"header and a list of class descriptions."
msgstr ""

msgid ""
"So for example, to create a collection that contains the dimension of the"
" most\n"
"common types of pipes, one creates a file called `pipes.blt` in the "
"`data`\n"
"directory of the BOLTS repository. The filename without the extension is "
"called\n"
"the collection id."
msgstr ""

msgid ""
"The file should begin with a license header that specifies the license of"
" the\n"
"file. BOLTS can work with a number of free licenses, a list and detailed\n"
"explanation can be found [here](licensing.html). If you are unsure what "
"to choose,\n"
"[LGPL 2.1 or later](http://www.gnu.org/licenses/lgpl-2.1) or a more "
"liberal license like\n"
"[MIT](http://opensource.org/licenses/MIT) are usually a good choice."
msgstr ""

msgid ""
"After the license header follows the collection header. It contains "
"general\n"
"details about the collection. A list of possible fields can be found in "
"the\n"
"[specification]({{ spec(collection-header) }}), but\n"
"alternatively looking at\n"
"[the other "
"collections](https://github.com/jreinhardt/BOLTS/tree/master/data)\n"
"should show you how this works."
msgstr ""

msgid ""
"The field blt-version gives the version of the blt file format, which is "
"not\n"
"the necessarily identical to the version of BOLTS. Which version is the "
"current\n"
"one can be found in the\n"
"[specification]({{ spec(collection-header) }})"
msgstr ""

msgid ""
"For the pipe collection the collection first part of the blt file looks "
"like this:"
msgstr ""

msgid ""
"#BOLTS - Open Library of Technical Specifications\n"
"    #Copyright (c) 2013 Johannes Reinhardt <jreinhardt@ist-dein-"
"freund.de>\n"
"    #\n"
"    #Permission is hereby granted, free of charge, to any person "
"obtaining a copy\n"
"    #of this software and associated documentation files (the "
"\"Software\"), to deal\n"
"    #in the Software without restriction, including without limitation "
"the rights\n"
"    #to use, copy, modify, merge, publish, distribute, sublicense, and/or"
" sell\n"
"    #copies of the Software, and to permit persons to whom the Software "
"is\n"
"    #furnished to do so, subject to the following conditions:\n"
"    #\n"
"    #The above copyright notice and this permission notice shall be "
"included in\n"
"    #all copies or substantial portions of the Software.\n"
"    #\n"
"    #THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, "
"EXPRESS OR\n"
"    #IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF "
"MERCHANTABILITY,\n"
"    #FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT "
"SHALL THE\n"
"    #AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR "
"OTHER\n"
"    #LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, "
"ARISING FROM,\n"
"    #OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER "
"DEALINGS IN\n"
"    #THE SOFTWARE.\n"
"    ---\n"
"    collection:\n"
"        name: BOLTS pipes\n"
"        description: metric and imperial pipes\n"
"        author: Johannes Reinhardt <jreinhardt@ist-dein-freund.de>\n"
"        license: MIT <http://opensource.org/licenses/MIT>\n"
"        blt-version: 0.2"
msgstr ""

msgid ""
"As license I chose the MIT license. The description should be short and\n"
"descriptive and give the user an indication about what kind of parts to "
"expect\n"
"here."
msgstr ""

msgid ""
"The license of the file as given by the license header should match the "
"one in\n"
"the license field of the collection header."
msgstr ""

msgid ""
"A email address must be given for the author, to have a way of contacting"
" the\n"
"author e.g. for licensing problems.  The license in the license field and"
" the\n"
"license header must agree and be one of the [licenses that BOLTS\n"
"allows]({{ doc(general,licensing) }}). If more than one person "
"contributed\n"
"significantly, then a list of authors can be given:"
msgstr ""

msgid ""
"author: [Johannes Reinhardt <jreinhardt@ist-dein-freund.de>, John Doe "
"<doe@domain.tld>]"
msgstr ""

msgid ""
"YAML uses indentation to mark up the structure of the document, so pay\n"
"attention to whitespace and do not use tabs. The amount of spaces for a\n"
"indentation level is arbitrary, but four spaces is recommended."
msgstr ""

msgid ""
"After the collection header follows the list of classes contained in the\n"
"collection. How to add a class is explained in the next section."
msgstr ""

msgid "### Adding classes to a collection"
msgstr ""

msgid ""
"After the header follows a list of class descriptions. If you are not "
"sure that\n"
"you know what a class is in BOLTS, you can read a bit about it\n"
"[here]({{ doc(general,introduction) }})."
msgstr ""

msgid ""
"Much of the most important information that BOLTS needs to know about a "
"class\n"
"concerns the different parameters of the part, their types, units and "
"tables\n"
"that connect them."
msgstr ""

msgid ""
"To continue the pipe example from the first section, lets consider a "
"pipe. To\n"
"fix its geometry completely, three dimensions are necessary: the inner\n"
"diameter, the outer diameter and the length."
msgstr ""

#, python-format
msgid ""
"However, some combinations of the three are more common than others, "
"because there are\n"
"[standards](http://en.wikipedia.org/wiki/Pipe_%%28fluid_conveyance%%29#Sizes)"
"\n"
"specify combinations of (some of) the parameters."
msgstr ""

msgid ""
"So another way to specify a pipe would be to specify a nominal pipe size "
"and a\n"
"length. There are tables that one can use to look up the inner and outer\n"
"diameter for a given nominal pipe size. The length of a pipe is usually "
"not\n"
"standardized."
msgstr ""

msgid ""
"There are different kinds of parameters in BOLTS. Free parameters are "
"those\n"
"that the user has to choose when he inserts a part, like the length of a "
"part.\n"
"BOLTS can also express tables, where a table index allows to lookup\n"
"combinations of other quantities, like the nominal pipe size allows to "
"look up\n"
"the corresponding inner and outer diameter."
msgstr ""

msgid ""
"The parameters are used in various ways: they are handed to the CAD "
"application\n"
"to build a 3D model of the part, or they are used to build a name for the"
" part\n"
"that can be used to label the part or to create a BOM."
msgstr ""

msgid ""
"We will now add two classes: One for a completely general pipe where the "
"user\n"
"can specify length and inner and outer diameter arbitrarily, and one "
"class that\n"
"provides pipes following DIN11850 Range 1."
msgstr ""

msgid ""
"Again, more information and inspiration can be found in the\n"
"[specification]({{ spec(class-element) }}) or by looking\n"
"at other collections."
msgstr ""

msgid "#### A generic pipe class"
msgstr ""

msgid "This is how the generic pipe class looks like"
msgstr ""

#, python-format
msgid ""
"classes:\n"
"      - id: genericpipe\n"
"        naming:\n"
"          template: Pipe OD %%g mm ID %%g mm length %%g mm\n"
"          substitute: [od, id, l]\n"
"        description: a generic pipe\n"
"        parameters:\n"
"          free: [od, id, l]\n"
"          defaults: {od: 13, id: 10, l: 1000}\n"
"        source: No sources used"
msgstr ""

msgid ""
"Each class needs a unique id. If the class is not covered by standards, "
"then\n"
"this id is also exposed to the user, so choosing a descriptive name is a "
"good\n"
"idea."
msgstr ""

#, python-format
msgid ""
"The naming field describes how to generate a name for the part. It "
"consists of\n"
"a template with placeholders (the parts with the %%), and the list of "
"parameter\n"
"values that should be inserted there. The placeholders follow the rules "
"of\n"
"[python string formatting](http://docs.python.org/2/library/stdtypes.html"
"#string-formatting)"
msgstr ""

msgid ""
"So a 1000mm long pipe with 12mm outer diameter and 10mm inner diameter "
"would\n"
"get the name `Pipe OD 12 mm ID 10 mm length 1000 mm`, which completely\n"
"specifies the part. You can send someone shopping for that and he will "
"come\n"
"back with the right part."
msgstr ""

msgid ""
"In the parameters field we specify that the part has three free "
"parameters\n"
"called `od`, `id` and `l`. It is a good idea to use short but expressive\n"
"parameter names because they can also appear on drawings."
msgstr ""

msgid "We also give sensible default values for the free parameters."
msgstr ""

msgid ""
"Finally, the source field should be used to explain where the "
"informations come\n"
"from on which this class is built. In this case we do not really need it,"
" but\n"
"this becomes very important when building classes for standards."
msgstr ""

msgid "#### A class for pipes according to DIN11850"
msgstr ""

msgid ""
"Before we can build the class for parts following a standard, a bit of "
"research\n"
"is necessary. First we need to find out which standards exist that "
"specify the\n"
"dimensions of the parts that we are interested in. Next we need to find "
"out as\n"
"much about the specifications as possible. Usually the standards are not "
"freely\n"
"available and rather expensive, but often vendors provide drawings or "
"tables or\n"
"other technical information. Technical information is a good term to "
"search\n"
"for. Usually you get a big table of dimensions."
msgstr ""

#, python-format
msgid ""
"In the case of pipes, it was very easy to find this information,\n"
"[Wikipedia got it (in "
"German)](http://de.wikipedia.org/wiki/Rohr_%%28Technik%%29#Abmessungen)."
"\n"
"A bit of search also reveals a\n"
"[vendor site with more tables](http://www.gillain.com/en/tubes-and-"
"components/p/detail/food-tubes-din-11850)."
msgstr ""

msgid "The class for DIN11850 looks like this"
msgstr ""

#, python-format
msgid ""
"- id: din11850range2\n"
"        naming:\n"
"          template: DIN11850 Range 2 DN %%d length %%g\n"
"          substitute: [dn, l]\n"
"        description: pipe\n"
"        standard: DIN11850 Range 2\n"
"        parameters:\n"
"          free: [dn, l]\n"
"          types: {dn: Table Index}\n"
"          defaults: {dn: \"10\", l: 1000}\n"
"          tables:\n"
"            index: dn\n"
"            columns: [id, od]\n"
"            data:\n"
"              \"6\" : [6, 8]\n"
"              \"8\" : [8, 10]\n"
"              \"10\" : [10, 13]\n"
"              \"15\" : [16, 19]\n"
"              \"20\" : [20, 23]\n"
"              \"25\" : [26, 29]\n"
"              \"32\" : [32, 35]\n"
"              \"40\" : [38, 41]\n"
"              \"50\" : [50, 53]\n"
"              \"65\" : [66, 70]\n"
"              \"80\" : [81, 85]\n"
"              \"100\" : [100, 104]\n"
"              \"125\" : [125, 129]\n"
"              \"150\" : [150, 154]\n"
"              \"200\" : [200, 204]\n"
"        notes: More tables can be found here http://www.gillain.com/en"
"/tubes-and-components/p/detail/food-tubes-din-11850. The data there "
"contradicts the one in Wikipedia, e.g. for DN32.\n"
"        source: de.wikipedia.org/wiki/Rohr_(Technik)#Abmessungen"
msgstr ""

msgid ""
"As this class follows a standard the id is not shown to the user, so "
"unique but\n"
"slighly bulky id is used. The first new thing in this class is the "
"standard\n"
"field. The reason why not the id is used to encode the standard is that "
"very\n"
"often there are equivalent standards issued by different organisations. "
"In this\n"
"case a list of standards can be given in the standard field, which saves "
"you\n"
"from duplicating a class description several times."
msgstr ""

msgid ""
"Unlike the generic pipe class this class only has two free parameters, "
"the\n"
"nominal diameter and the length. The inner and outer diameters will be "
"obtained\n"
"from a table, which is why the parameter `dn` is indicated to be of type "
"`Table\n"
"Index`. If the type of a parameter is not indicated, it defaults to "
"`Length\n"
"(mm)`. Other choices for types for parameters can be found in the\n"
"[specification]({{ spec(parameter-element) }})"
msgstr ""

msgid ""
"Then one or several tables can follow in the tables field. Here we have "
"only\n"
"one, linking the nominal diameter to the inner and outer diameter. Table\n"
"Indices should always be strings in YAML, so when there is ambiguity (as "
"it is\n"
"here), enclose it by quotes."
msgstr ""

msgid ""
"If there are confusions or open questions or other things that you feel "
"should\n"
"be communicated to people that might to work on this informationn in the\n"
"future, it can be put in the notes field. We put a short notice that we "
"found\n"
"more tables but with conflicting data."
msgstr ""

msgid ""
"Finally the source field should now contains the link to the Wikipedia "
"page\n"
"where we got the data for the table from."
msgstr ""

msgid ""
"To test whether you got it right, you can use the [utility\n"
"script]({{ doc(general,utility-script) }}) to regenerate the html\n"
"documentation. If there are any problems with your blt file, you should "
"get a\n"
"error message."
msgstr ""

msgid "### Further steps"
msgstr ""

msgid ""
"A collection becomes really useful, when [base geometries]({{ "
"doc(general,introduction) }})\n"
"for its classes exist. Maybe you want to implement a \n"
"[base module for OpenSCAD]({{ doc(openscad,basemodule) }})\n"
"or a \n"
"[base function for FreeCAD]({{ doc(freecad,basefunction) }})\n"
"for your newly created collection."
msgstr ""

msgid ""
"(Actually, the [base module tutorial]({{ doc(openscad,basemodule) }})\n"
"explains how to setup a base-module for the pipe collection.)"
msgstr ""

#. document title
msgid "How to use a development checkout"
msgstr ""

msgid ""
"This assumes that you have obtained a git checkout by cloning either the\n"
"official BOLTS git or a fork. You need to have python, pyYAML and "
"optionally\n"
"FreeCAD and OpenSCAD installed. This tutorial makes heavy use of the\n"
"commandline."
msgstr ""

msgid ""
"There are several tasks that are so common in BOLTS development that they"
" have\n"
"been put into a script called bolts.py. This tutorial describes how to "
"use this\n"
"script to perform these tasks. Some information about the available "
"subcommands\n"
"and options is available by typing"
msgstr ""

msgid "./bolts.py --help"
msgstr ""

msgid "### Exporting backends"
msgstr ""

msgid ""
"After making some changes, one might want to rebuild the output of a "
"backend,\n"
"so that one can inspect it. This can be done using the `export` "
"subcommand. The\n"
"results of this operation can be found in the respective subdirectory of "
"the\n"
"output directory."
msgstr ""

msgid "For example to regenerate the OpenSCAD distribution one uses"
msgstr ""

msgid "./bolts.py export openscad"
msgstr ""

msgid ""
"To build a OpenSCAD library that is restricted to content compatible with"
" a\n"
"certain license, one can supply an additional argument:"
msgstr ""

msgid "./bolts.py export openscad --license lgpl2.1+"
msgstr ""

msgid ""
"One can also regenerate the HTML output, which is useful when creating "
"drawings\n"
"or adding new collections"
msgstr ""

msgid "./bolts.py export html"
msgstr ""

msgid "### Running automatic checks"
msgstr ""

msgid ""
"BOLTS can run some automatic checks and detect a few common errors, "
"problems\n"
"and inconsistencies."
msgstr ""

msgid "To do so, execute"
msgstr ""

msgid "./bolts.py check"
msgstr ""

msgid "A report is displayed with all the problems found and a short explanation."
msgstr ""

msgid "### Listing tasks"
msgstr ""

msgid ""
"BOLTS can also look for missing bits and pieces and other small jobs that"
" make\n"
"BOLTS more complete or consistent."
msgstr ""

msgid "To show a list of such tasks use"
msgstr ""

msgid ""
"If there are tasks available, they are displayed together with a short\n"
"explanation."
msgstr ""

msgid "### Testing CAD applications"
msgstr ""

msgid ""
"Manual inspection and automatic checks are good, but some errors can only"
" be\n"
"found when working in the CAD application. The utility script allows to "
"fire up\n"
"instances of OpenSCAD or FreeCAD with all necessary paths setup such that"
" one\n"
"can test freshly exported distributions."
msgstr ""

msgid "This is done with the `test` subcommand. To test for FreeCAD type"
msgstr ""

msgid ""
"This exports a FreeCAD distribution and starts an instance of FreeCAD "
"with the\n"
"module search paths set up correctly. You can now start BOLTS by typing"
msgstr ""

msgid "into the FreeCAD Python console and then test your changes."
msgstr ""

msgid "To test for OpenSCAD type"
msgstr ""

msgid ""
"This exports a OpenSCAD distribution and starts an instance of OpenSCAD "
"so that\n"
"it finds the exported distribution. You can now include BOLTS by entering"
msgstr ""

msgid "include <BOLTS.scad>;"
msgstr ""

msgid ""
"in the editor. It should now be possible to invoke BOLTS modules to test\n"
"whether everything works."
msgstr ""

msgid "### Creating releases"
msgstr ""

msgid ""
"The utility script also automates the process of preparing archives of "
"released\n"
"versions of BOLTS, by using the `release` subcommand. This is usually "
"only used\n"
"by the maintainer."
msgstr ""

#. document title
msgid "A short introduction to BOLTS"
msgstr ""

msgid ""
"The aim of BOLTS is to build a free and open-source standard parts "
"library that\n"
"is not tied to a specific CAD applications. For this reason all the data\n"
"necessary to make the parts available is structured in a certain way: "
"There is\n"
"backend independent data and backend specific data, where backend refers "
"to the\n"
"different CAD applications (for now FreeCAD and OpenSCAD). By making this"
"\n"
"separation, if a part is available in one CAD application, the only thing"
" that\n"
"is required to make it available in another one is to add the necessary "
"backend\n"
"specific data."
msgstr ""

msgid "### Backend independent data"
msgstr ""

msgid ""
"Very often there exist several similar or even identical standards for "
"one\n"
"part, issued by different organisations. For this reason, BOLTS has the "
"concept\n"
"of a class of parts, where one class can cover several identical "
"standards. To\n"
"specify a class of parts, we have to specify information about the "
"various\n"
"dimensions of the part, tables with values for these dimensions, a "
"description,\n"
"the standards that this class covers, a drawing of the part and so on. "
"The way\n"
"in which the geometry of the part is specified is different for different"
" CAD\n"
"applications and therefore belongs to the backend specific data."
msgstr ""

msgid ""
"BOLTS provides another level of organisation, the collection. A "
"collection\n"
"contains several classes, so that similar but not identical classes can "
"be\n"
"grouped together. All the information about the classes in a collection "
"is\n"
"stored in a blt file."
msgstr ""

msgid "### Backend specific data"
msgstr ""

msgid ""
"There is also data required to create a 3D representation of a part in a "
"CAD\n"
"tool. For OpenSCAD we use a module definition in a scad file or a stl "
"file, for\n"
"FreeCAD a python function or a fcstd file containing the model. These are"
" also\n"
"called base modules, base functions or base fcstd files, or base "
"geometries\n"
"when referring to any of them. Together with a base file containing "
"metadata\n"
"this forms the backend specific data."
msgstr ""

msgid "### Synergy"
msgstr ""

msgid ""
"Very often several classes can share the base geometry. For example BOLTS"
" nows\n"
"about 18 different standards for washers. These are covered by 5 "
"different\n"
"classes, which only need 2 different base geometries."
msgstr ""

msgid ""
"A picture says more than thousand words. The two boxes on the left "
"(Standards\n"
"and Classes) are backend independent. The backend specific part is just 2"
" base\n"
"geometries for each applications:"
msgstr ""

#, python-format
msgid ""
"[<img alt=\"Washer collection\" src=\"{{ static(washer.png) }}\" "
"style=\"width: 100%%;\"/>]({{ static(washer.png) }})"
msgstr ""

msgid "### Summary"
msgstr ""

msgid ""
"To summarize again:\n"
" - The data in BOLTS is either backend independent or backend specific.\n"
" - A class covers zero or more standards, a collection contains one or "
"more classes\n"
" - For a class to be usable in an application, BOLTS must have a suitable"
" base geometry for that class."
msgstr ""

msgid "To summarize again:"
msgstr ""

msgid ""
"- The data in BOLTS is either backend independent or backend specific.\n"
" - A class covers zero or more standards, a collection contains one or "
"more classes\n"
" - For a class to be usable in an application, BOLTS must have a suitable"
" base geometry for that class."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "    import BOLTS"
#~ msgstr ""

#~ msgid "    No module named yaml"
#~ msgstr ""

#~ msgid "    No module named importlib"
#~ msgstr ""

#~ msgid "    uic import failed. Make sure that the pyside tools are installed"
#~ msgstr ""

#~ msgid "    import Part"
#~ msgstr ""

#~ msgid "    BOLTS.widget.ui.addButton.clicked.emit(True)"
#~ msgstr ""

#~ msgid "    ISO4014();"
#~ msgstr ""

#~ msgid "    ISO4014(\"M8\",40);"
#~ msgstr ""

#~ msgid "    dims = DIN125A_dims(\"M4\");"
#~ msgstr ""

#~ msgid "     [[\"s\", 0.8], [\"d2\", 9], [\"key\", \"M4\"], [\"d1\", 4.3]]"
#~ msgstr ""

#~ msgid "    echo(dims[3][0]);"
#~ msgstr ""

#~ msgid "    echo(get_dim(dims,\"d1\"));"
#~ msgstr ""

#~ msgid "    echo(get_dim(DIN125A_dims(\"M4\"),\"d1\"));"
#~ msgstr ""

#~ msgid "    ISO4014(40,\"M8\");"
#~ msgstr ""

#~ msgid "    ISO4014(\"M8\",-40);"
#~ msgstr ""

#~ msgid "    DIN931(\"M4\",20);"
#~ msgstr ""

#~ msgid "    BOLTS_version()"
#~ msgstr ""

#~ msgid "    BOLTS_date()"
#~ msgstr ""

#~ msgid "    BOLTS_license()"
#~ msgstr ""

#~ msgid "which returns a string with the license.\n"
#~ msgstr ""

#~ msgid "    include <BOLTS.scad>"
#~ msgstr ""

#~ msgid "    DIN11850_Range_2(\"10\",1000);"
#~ msgstr ""

#~ msgid "    ./bolts.py connectors"
#~ msgstr ""

#~ msgid "    ./bolts.py tasks"
#~ msgstr ""

#~ msgid "    git checkout -b \"branchname\""
#~ msgstr ""

#~ msgid "    git status"
#~ msgstr ""

#~ msgid "    git checkout branchname"
#~ msgstr ""

#~ msgid "    git commit"
#~ msgstr ""

#~ msgid "    git push origin branchname"
#~ msgstr ""

#~ msgid "    git bundle create branchname.bundle origin/master..branchname"
#~ msgstr ""

#~ msgid "\n"
#~ msgstr ""

#~ msgid "    ./bolts.py --help"
#~ msgstr ""

#~ msgid "    ./bolts.py export openscad"
#~ msgstr ""

#~ msgid "    ./bolts.py export openscad --license lgpl2.1+"
#~ msgstr ""

#~ msgid "    ./bolts.py export html"
#~ msgstr ""

#~ msgid "    ./bolts.py check"
#~ msgstr ""

#~ msgid "    include <BOLTS.scad>;"
#~ msgstr ""

#~ msgid "Beimer, beimer, beimer\n"
#~ msgstr ""

#~ msgid "import BOLTS"
#~ msgstr ""

#~ msgid "### Download a BOLTS for FreeCAD release"
#~ msgstr ""

#~ msgid "No module named yaml"
#~ msgstr ""

#~ msgid "No module named importlib"
#~ msgstr ""

#~ msgid "uic import failed. Make sure that the pyside tools are installed"
#~ msgstr ""

#~ msgid "### The function"
#~ msgstr ""

#~ msgid "import Part"
#~ msgstr ""

#~ msgid "BOLTS.widget.ui.addButton.clicked.emit(True)"
#~ msgstr ""

#~ msgid "ISO4014();"
#~ msgstr ""

#~ msgid "ISO4014(\"M8\",40);"
#~ msgstr ""

#~ msgid "dims = DIN125A_dims(\"M4\");"
#~ msgstr ""

#~ msgid "[[\"s\", 0.8], [\"d2\", 9], [\"key\", \"M4\"], [\"d1\", 4.3]]"
#~ msgstr ""

#~ msgid "echo(dims[3][0]);"
#~ msgstr ""

#~ msgid "echo(get_dim(dims,\"d1\"));"
#~ msgstr ""

#~ msgid "echo(get_dim(DIN125A_dims(\"M4\"),\"d1\"));"
#~ msgstr ""

#~ msgid "### Check for errors"
#~ msgstr ""

#~ msgid "ISO4014(40,\"M8\");"
#~ msgstr ""

#~ msgid "ISO4014(\"M8\",-40);"
#~ msgstr ""

#~ msgid "DIN931(\"M4\",20);"
#~ msgstr ""

#~ msgid "BOLTS_version()"
#~ msgstr ""

#~ msgid "BOLTS_date()"
#~ msgstr ""

#~ msgid "BOLTS_license()"
#~ msgstr ""

#~ msgid "which returns a string with the license."
#~ msgstr ""

#~ msgid "### Putting the scad file to the right place"
#~ msgstr ""

#~ msgid "include <BOLTS.scad>"
#~ msgstr ""

#~ msgid "DIN11850_Range_2(\"10\",1000);"
#~ msgstr ""

#~ msgid "./bolts.py connectors"
#~ msgstr ""

#~ msgid "./bolts.py tasks"
#~ msgstr ""

#~ msgid "### Prerequisites"
#~ msgstr ""

#~ msgid "### Exporting a part from BOLTS for OpenSCAD"
#~ msgstr ""

#~ msgid "git checkout -b \"branchname\""
#~ msgstr ""

#~ msgid "git status"
#~ msgstr ""

#~ msgid "git checkout branchname"
#~ msgstr ""

#~ msgid "git commit"
#~ msgstr ""

#~ msgid "git push origin branchname"
#~ msgstr ""

#~ msgid "git bundle create branchname.bundle origin/master..branchname"
#~ msgstr ""

#~ msgid "./bolts.py --help"
#~ msgstr ""

#~ msgid "./bolts.py export openscad"
#~ msgstr ""

#~ msgid "./bolts.py export openscad --license lgpl2.1+"
#~ msgstr ""

#~ msgid "./bolts.py export html"
#~ msgstr ""

#~ msgid "### Running automatic checks"
#~ msgstr ""

#~ msgid "./bolts.py check"
#~ msgstr ""

#~ msgid "### Testing CAD applications"
#~ msgstr ""

#~ msgid "include <BOLTS.scad>;"
#~ msgstr ""

#~ msgid "Eimer, eimer, eimer"
#~ msgstr ""

#~ msgid "Beimer, beimer, beimer"
#~ msgstr ""

